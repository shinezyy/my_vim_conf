set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" call plug#begin("~/.neovim/plugged")
call plug#begin('~/.vim/bundle')
"
" bad wolf
Plug 'sjl/badwolf'

" YCM
" Plug 'Valloric/YouCompleteMe'

" jedi-vim for type hint
Plug 'davidhalter/jedi-vim'


" Plug 'ensime/ensime-vim', { 'do': ':UpdateRemotePlugins', 'for': 'scala'}
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
" Plug 'cloudhead/neovim-fuzzy'
" Plug 'neomake/neomake'
" Plug 'ervandew/supertab'

"Code completion with Deoplete - enabled by ensime
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#sources={}
" let g:deoplete#sources._=['buffer', 'member', 'tag',
"             \ 'file', 'omni', 'ultisnips']
" let g:deoplete#omni#input_patterns={}
" let g:deoplete#omni#input_patterns.scala='[^. *\t]\.\w*'
" 
" let maplocalleader=";"
" nnoremap <localleader>t :EnType<CR>
" au FileType scala nnoremap <localleader>df :EnDeclaration<CR>
" 
" autocmd BufWritePost *.scala silent :EnTypeCheck
" 
" " Initialize plugin system
call plug#end()            " required
" 
" " Use deoplete
" let g:deoplete#enable_at_startup = 1
" " fuzzy finder with ctrl-p
" nnoremap <C-p> :FuzzyOpen<CR>
" " easier split navigations
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>
" "Linting with neomake
" let g:neomake_sbt_maker = {
"       \ 'exe': 'sbt',
"       \ 'args': ['-Dsbt.log.noformat=true', 'compile'],
"       \ 'append_file': 0,
"       \ 'auto_enabled': 1,
"       \ 'output_stream': 'stdout',
"       \ 'errorformat':
"           \ '%E[%trror]\ %f:%l:\ %m,' .
"             \ '%-Z[error]\ %p^,' .
"             \ '%-C%.%#,' .
"             \ '%-G%.%#'
"      \ }
" let g:neomake_enabled_makers = ['sbt']
" let g:neomake_verbose=3
" Neomake on text change
" autocmd InsertLeave,TextChanged * update | Neomake! sbt


" color :
set t_Co=256
set background=dark
" colorscheme solarized
colorscheme badwolf
" set background=light
" colorscheme solarized

"tab :
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4

"UI config :
set number
set showcmd
set cursorline
set linebreak
set hlsearch
set smartindent
set autoindent
set showmatch
set showmode
filetype indent on
filetype plugin indent on
set incsearch
set ruler
set backspace=2
"set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
autocmd FileType scala set tabstop=2
autocmd FileType scala set softtabstop=2
autocmd FileType scala set shiftwidth=2

autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead SConstruct set filetype=python

set history=50

"personal shortcut :
:command Q q
:command W w
:command WQ wq
:command Wq wq

"fold :
set foldenable " 开始折叠
set foldmethod=syntax " 设置语法折叠
set foldcolumn=0 " 设置折叠区域的宽度
setlocal foldlevel=100 " 设置折叠层数为 1
set foldlevel=100 " 设置折叠层数为 1

" Highlight trailing whitespace and lines longer than 120 columns.
highlight LongLine ctermbg=DarkYellow guibg=DarkYellow
highlight WhitespaceEOL ctermbg=DarkYellow guibg=DarkYellow
if v:version >= 702
  " Lines longer than 120 columns.
  au BufWinEnter * let w:m0=matchadd('LongLine', '\%>120v.\+', -1)
  au BufWinEnter *.txt,*.md call matchdelete(w:m0)

  " Whitespace at the end of a line. This little dance suppresses
  " whitespace that has just been typed.
  au BufWinEnter * let w:m1=matchadd('WhitespaceEOL', '\s\+$', -1)
  au InsertEnter * call matchdelete(w:m1)
  au InsertEnter * let w:m2=matchadd('WhitespaceEOL', '\s\+\%#\@<!$', -1)
  au InsertLeave * call matchdelete(w:m2)
  au InsertLeave * let w:m1=matchadd('WhitespaceEOL', '\s\+$', -1)
else
  au BufRead,BufNewFile * syntax match LongLine /\%>120v.\+/
  au InsertEnter * syntax match WhitespaceEOL /\s\+\%#\@<!$/
  au InsertLeave * syntax match WhitespaceEOL /\s\+$/
endif

" Encoding priorities
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set enc=utf8
set fencs=utf8,gbk,gb2312,gb18030

" The editing history per file
if has("autocmd")
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Super tab direciton
let g:SuperTabDefaultCompletionType = "<c-n>"

nnoremap <C-p> :FuzzyOpen<CR>

" shortcuts for YCM
let mapleader=";"
nnoremap <leader>dc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>df :YcmCompleter GoToDefinition<CR>
nnoremap <leader>ic :YcmCompleter GoToInclude<CR>
nnoremap <leader>gt :YcmCompleter GoTo<CR>

let g:jedi#completions_command = "<C-l>"
let g:jedi#popup_on_dot = 0

" prevent loading questions
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf_global.py'
let g:ycm_extra_conf_globlist = [
            \ '~/projects/gem5/*',
            \ '~/projects/ff-reshape/*',
            \]

let g:ycm_filetype_specific_completion_to_disable = {
            \ 'gitcommit': 1,
            \}
            "\ 'python': 0
let g:ycm_filetype_blacklist = {
            \ 'vimshell': 1,
            \}
            "\ 'python': 0

autocmd Bufenter Makefrag* set syntax=make

set laststatus=0 ruler
